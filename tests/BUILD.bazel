load(
    "//:def.bzl",
    "gazelle_binary",
    "gazelle_generation_test",
)
load("//tests:tools.bzl", "get_binary")

# Exclude this entire directly from having anything gnerated by Gazelle. That
# way the test cases won't be fixed by `bazel run //:gazelle` when run in this
# repository.
# gazelle:exclude **

# This test Gazelle binary only has the "test_filegroup" plugin installed.
gazelle_binary(
    name = "gazelle",
    languages = [
        "//internal/language/test_filegroup",
    ],
    visibility = ["//visibility:private"],
)

gazelle_binary(
    name = "gazelle_with_language_loads_from_flag",
    languages = [
        "//internal/language/test_loads_from_flag",
    ],
    visibility = ["//visibility:private"],
)

gazelle_binary(
    name = "gazelle_with_language_load_for_packed_rules",
    languages = [
        "//internal/language/test_load_for_packed_rules",
    ],
    visibility = ["//visibility:private"],
)

# Each test case
TESTS = [file[0:-len("/WORKSPACE")] for file in glob(include = ["**/WORKSPACE"])]

# The files for each test case
TEST_FILES = [glob(include = [test + "/**"]) for test in TESTS]

# The plain source files for each test case
TEST_DATA_FILES = [[d for d in data if d.find(".test-") == -1] for data in TEST_FILES]

# Files generated for each test case
TEST_GEN_FILES_IN = [[d for d in data if d.find(".test-") != -1] for data in TEST_FILES]
TEST_GEN_FILES_OUT = [[d.replace(".test-", ".") for d in data] for data in TEST_GEN_FILES_IN]

# genrules renaming files with ".test-" prefix to "." prefix.
[
    [
        genrule(
            name = "rename_%s_%s" % (TESTS[i], j),
            srcs = [TEST_GEN_FILES_IN[i][j]],
            outs = [TEST_GEN_FILES_OUT[i][j]],
            cmd = "cp $< $@",
            visibility = ["//visibility:private"],
        )
        for j in range(len(TEST_GEN_FILES_IN[i]))
    ]
    for i in range(len(TESTS))
]

[gazelle_generation_test(
    # Name the test the path to the directory containing the WORKSPACE file.
    name = TESTS[i],
    gazelle_binary = get_binary(TESTS[i]),
    # This is a noop as the default is False. However, it does confirm that
    # gazelle_generation_test accepts setting common test attributes.
    local = False,
    test_data = TEST_DATA_FILES[i] + TEST_GEN_FILES_OUT[i]
) for i in range(len(TESTS))]
